const CleanupService = require('../../src/services/cleanupService');
const BattleService = require('../../src/services/battleService');
const UserStatus = require('../../src/models/UserStatus');
const { mockUserStatus } = require('../mocks/battleMocks');

// Mock BattleService
jest.mock('../../src/services/battleService');

// Mock UserStatus model
jest.mock('../../src/models/UserStatus');

describe('CleanupService', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });

  describe('cleanupTimeoutUsers', () => {
    it('Â∫îËØ•ÊàêÂäüÊ∏ÖÁêÜË∂ÖÊó∂Áî®Êà∑', async () => {
      // Arrange
      const timeoutUsers = [mockUserStatus[3]]; // 5ÂàÜÈíüÂâçÊ¥ªÂä®ÁöÑÁî®Êà∑
      const cleanedCount = 1;
      
      BattleService.cleanupTimeoutUsers.mockResolvedValue(cleanedCount);

      // Act
      const result = await CleanupService.cleanupTimeoutUsers();

      // Assert
      expect(BattleService.cleanupTimeoutUsers).toHaveBeenCalled();
      expect(result).toBe(cleanedCount);
    });

    it('Â∫îËØ•Â§ÑÁêÜÊ∏ÖÁêÜËøáÁ®ã‰∏≠ÁöÑÈîôËØØ', async () => {
      // Arrange
      const error = new Error('Ê∏ÖÁêÜÂ§±Ë¥•');
      BattleService.cleanupTimeoutUsers.mockRejectedValue(error);

      // Act
      const result = await CleanupService.cleanupTimeoutUsers();

      // Assert
      expect(result).toBe(0);
    });
  });

  describe('cleanupExpiredUserStatus', () => {
    it('Â∫îËØ•ÊàêÂäüÊ∏ÖÁêÜËøáÊúüÁöÑÁî®Êà∑Áä∂ÊÄÅËÆ∞ÂΩï', async () => {
      // Arrange
      const deletedCount = 5;
      UserStatus.destroy.mockResolvedValue(deletedCount);

      // Act
      const result = await CleanupService.cleanupExpiredUserStatus();

      // Assert
      expect(UserStatus.destroy).toHaveBeenCalledWith({
        where: {
          last_activity: {
            $lt: expect.any(Date)
          },
          status: 'idle'
        }
      });
      expect(result).toBe(deletedCount);
    });

    it('Â∫îËØ•Â§ÑÁêÜÊ∏ÖÁêÜËøáÁ®ã‰∏≠ÁöÑÈîôËØØ', async () => {
      // Arrange
      const error = new Error('Ê∏ÖÁêÜÂ§±Ë¥•');
      UserStatus.destroy.mockRejectedValue(error);

      // Act
      const result = await CleanupService.cleanupExpiredUserStatus();

      // Assert
      expect(result).toBe(0);
    });

    it('Â∫îËØ•Âú®Ê≤°ÊúâËøáÊúüËÆ∞ÂΩïÊó∂ËøîÂõû0', async () => {
      // Arrange
      UserStatus.destroy.mockResolvedValue(0);

      // Act
      const result = await CleanupService.cleanupExpiredUserStatus();

      // Assert
      expect(result).toBe(0);
    });
  });

  describe('startCleanupTasks', () => {
    it('Â∫îËØ•ÂêØÂä®ÂÆöÊó∂Ê∏ÖÁêÜ‰ªªÂä°', () => {
      // Arrange
      const mockSetInterval = jest.spyOn(global, 'setInterval');
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

      // Act
      CleanupService.startCleanupTasks();

      // Assert
      expect(mockSetInterval).toHaveBeenCalledTimes(2);
      expect(consoleSpy).toHaveBeenCalledWith('üïê ÂêØÂä®ÂÆöÊó∂Ê∏ÖÁêÜ‰ªªÂä°...');
      expect(consoleSpy).toHaveBeenCalledWith('‚úÖ ÂÆöÊó∂Ê∏ÖÁêÜ‰ªªÂä°Â∑≤ÂêØÂä®');

      // Cleanup
      mockSetInterval.mockRestore();
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•ËÆæÁΩÆÊ≠£Á°ÆÁöÑÂÆöÊó∂Âô®Èó¥Èöî', () => {
      // Arrange
      const mockSetInterval = jest.spyOn(global, 'setInterval');
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

      // Act
      CleanupService.startCleanupTasks();

      // Assert
      expect(mockSetInterval).toHaveBeenNthCalledWith(1, expect.any(Function), 30000); // 30Áßí
      expect(mockSetInterval).toHaveBeenNthCalledWith(2, expect.any(Function), 60 * 60 * 1000); // 1Â∞èÊó∂

      // Cleanup
      mockSetInterval.mockRestore();
      consoleSpy.mockRestore();
    });
  });
}); 