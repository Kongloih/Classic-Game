version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: arcade_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: arcade_platform
      MYSQL_USER: arcade_user
      MYSQL_PASSWORD: arcade_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - arcade_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: arcade_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123456
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - arcade_network

  # 后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: arcade_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: arcade_platform
      DB_USER: arcade_user
      DB_PASSWORD: arcade_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123456
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
      - "5001:5001"  # Socket.IO端口
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mysql
      - redis
    networks:
      - arcade_network

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: arcade_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_BASE_URL: http://localhost:5000
      REACT_APP_SOCKET_URL: http://localhost:5001
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - arcade_network

  # Nginx 负载均衡器（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: arcade_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - arcade_network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  arcade_network:
    driver: bridge 