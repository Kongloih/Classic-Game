# version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: registry.cn-hangzhou.aliyuncs.com/library/mysql:8.0
    container_name: arcade_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-arcade_platform}
      MYSQL_USER: ${MYSQL_USER:-arcade_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-arcade_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - arcade_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis 缓存
  redis:
    image: registry.cn-hangzhou.aliyuncs.com/library/redis:7-alpine
    container_name: arcade_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123456}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - arcade_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5

  # 后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: arcade_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-arcade_platform}
      DB_USER: ${MYSQL_USER:-arcade_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-arcade_pass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123456}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - arcade_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: arcade_frontend_prod
    restart: unless-stopped
    environment:
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://localhost/api}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL:-http://localhost}
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - arcade_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  arcade_network:
    driver: bridge 